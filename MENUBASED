import os
import time
import pywhatkit
import pyautogui
import numpy as np
import matplotlib.pyplot as plt
from twilio.rest import Client
import cv2
import subprocess
import tkinter as tk
from datetime import datetime
from pymongo import MongoClient
from tkinter import filedialog
from PIL import Image, ImageDraw
from googlesearch import search
import boto3
from pynput.keyboard import Key, Controller
from geopy.geocoders import Nominatim
import telethon
import requests
import facebook
import discord
from discord.ext import commands

keyboard = Controller()

def connect_to_mongo():
    try:
        mongo_uri = "mongodb://localhost:27017"
        client = MongoClient(mongo_uri)
        db = client["my_database"]
        collection = db["my_collection"]
        document_count = collection.count_documents({})
        print(f"Number of documents in the collection: {document_count}")
        log_access("Connected to MongoDB and counted documents.")
    except Exception as e:
        print(f"Failed to connect to MongoDB: {e}")
        log_access(f"Failed to connect to MongoDB: {e}")

def upload_to_s3():
    try:
        file_path = filedialog.askopenfilename()
        if file_path:
            s3.upload_file(file_path, "shrest", os.path.basename(file_path))
            log_access(f"Uploaded {os.path.basename(file_path)} to S3")
            print(f"Uploaded {os.path.basename(file_path)} to S3")
        else:
            print("No file selected.")
    except Exception as e:
        print(f"Failed to upload file to S3: {e}")

def log_access(action):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {action}\n"
    
    with open("access_log.txt", "a") as log_file:
        log_file.write(log_message)
    
    try:
        s3.upload_file("access_log.txt", "shrest", "access_log.txt")
        print("Log updated and uploaded to S3.")
    except Exception as e:
        print(f"Failed to upload log to S3: {e}")

def open_software(software_name):
    software_path = {
        "vlc": "vlc.exe",
        "taskmgr": "taskmgr",
        "command prompt": "cmd.exe",
        "calculator": "calc.exe",
        "chrome": "chrome.exe",
        
        "explorer": "explorer.exe",
        "notepad": "notepad.exe",
        "paint": "mspaint.exe",
    }

    if software_name in software_path:
        try:
            os.startfile(software_path[software_name])
            log_access(f"Opened software: {software_name}")
        except Exception as e:
            status_label.config(text=f"Error: {e}", fg="red")
    else:
        status_label.config(text="Software not found.", fg="red")
    pass

def whatsapp():
    from pynput.keyboard import Key, Controller
    keyboard = Controller()
    try:
        pywhatkit.sendwhatmsg_instantly(
            phone_no="+919057031921", 
            message="Hello Linux World",
            tab_close=True
        )
        time.sleep(20)
        pyautogui.click()
        time.sleep(5)
        keyboard.press(Key.enter)
        keyboard.release(Key.enter)
        log_access("Sent WhatsApp message")
        print("Message sent!")
    except Exception as e:
        print(str(e))

def message():
    client = Client("AC52b95019387bfa6f9c4225e1344d78ab", "3c8a21e0ca2a082b6dd20bdc59ce22d2")
    client.messages.create(to="+919057031921", 
                           from_="+13393561944", 
                           body="Hello Linux World!")
    log_access("Sent SMS message")

def click_photo():
    cap = cv2.VideoCapture(0)
    status, photo = cap.read()
    cv2.imwrite("pic.jpg", photo)
    cv2.imshow("My photo", photo)
    cv2.waitKey(5000)
    cv2.destroyAllWindows()
    cap.release()
    log_access("Captured photo")

def crop_pic():
    cap = cv2.VideoCapture(0)
    status, photo = cap.read()
    cv2.imwrite("pic.jpg", photo)
    cv2.imshow("My photo", photo[200:540, 200:430])
    cv2.waitKey(5000)
    cv2.destroyAllWindows()
    cap.release()
    log_access("Captured and cropped photo")

def capture_video():
    cap = cv2.VideoCapture(0)
    while True:
        status, photo = cap.read()
        cv2.imshow("My photo", photo)
        if cv2.waitKey(5) == 13:
            break
    cv2.destroyAllWindows()
    log_access("Captured video")

def capture_crop_video():
    cap = cv2.VideoCapture(0)
    while True:
        status, photo = cap.read()
        photo[0:200, 0:200] = photo[200:400, 200:400]
        cv2.imshow("My photo", photo)
        if cv2.waitKey(5) == 13:
            break
    cv2.destroyAllWindows()
    log_access("Captured cropped video")

def image_100_100():
    width = 400
    height = 300
    channels = 3
    image = np.zeros((height, width, channels), dtype=np.uint8)

    image[:300, 0:400, 0] = 50
    image[:300, 0:400, 1] = 50
    image[:300, 0:400, 2] = 50

    image[200:300, 50:100, 0] = 55
    image[200:300, 50:100, 1] = 0
    image[200:300, 50:100, 2] = 9

    image[200:300, 300:350, 0] = 55
    image[200:300, 300:350, 1] = 0
    image[200:300, 300:350, 2] = 9

    image[175:200, 25:375, 0] = 55
    image[175:200, 25:375, 1] = 0
    image[175:200, 25:375, 2] = 9

    image[160:175, 160:240, 0] = 0
    image[160:175, 160:240, 1] = 0
    image[160:175, 160:240, 2] = 0

    image[50:160, 100:300, 0] = 0
    image[50:160, 100:300, 1] = 0
    image[50:160, 100:300, 2] = 0

    image[60:150, 110:290, 0] = 108
    image[60:150, 110:290, 1] = 255
    image[60:150, 110:290, 2] = 255

    plt.imshow(image)
    plt.axis('on')
    plt.show()
    log_access("Created 100x100 image")

def get_coordinates():
    location_name = input("Enter the city name:")
    geolocator = Nominatim(user_agent="location_finder")
    location = geolocator.geocode(location_name)
    if location is None:
        print(f"Coordinates not found for '{location_name}'.")
        return None
    else:
        latitude = location.latitude
        longitude = location.longitude
        print(f"Coordinates for '{location_name}': Latitude = {latitude}, Longitude = {longitude}.")
        log_access(f"Retrieved coordinates for {location_name}")
        return latitude, longitude

def top_5_google_searches():
    query = input("Search here: ")
    try:
        search_results = list(search(query, num_results=5))
        print(f"Top 5 Google Searches for '{query}':")
        for index, result in enumerate(search_results, start=1):
            print(f"{index}. {result}")
        log_access(f"Performed Google search for {query}")
    except Exception as e:
        print("Error: ", str(e))
        log_access(f"Failed to perform Google search for {query}")

def launch_instance():
    myec2.create_instances(
        InstanceType="t2.micro",
        ImageId="ami-0ec0e125bb6c6e8ec",
        MaxCount=1,
        MinCount=1
    )
    log_access("Launched EC2 instance")

def create_bucket():
    bucket = boto3.client('s3', region_name='ap-south-1')
    bucket.create_bucket(
        Bucket='shreyansh13',
        ACL='private',
        CreateBucketConfiguration={
            'LocationConstraint': 'ap-south-1'}
    )
    log_access("Created S3 bucket")

def use_sns_service():
    sns = boto3.client('sns', region_name='ap-south-1')
    sns.publish(
        Message='Dont take it serious.',
        Subject='This is an automated SNS service.',
        TopicArn='arn:aws:sns:ap-south-1:299592517672:python_menu'
    )
    print("Email sent")
    log_access("Used SNS service")

def send_email():
    try:
        subject = "Test Email from Python"
        body = "This is a test email sent from a Python application."
        recipient = "nohwarshreyansh@example.com"
        command = f'echo "{body}" | mail -s "{subject}" {recipient}'
        subprocess.run(command, shell=True, check=True)
        print("Email sent successfully!")
        log_access("Sent email")
    except subprocess.CalledProcessError as e:
        print(f"Failed to send email: {e}")
        log_access(f"Failed to send email: {e}")

def send_sms_terminal():
    try:
        os.system('echo "Hello from Terminal" | smscli send --to +919057031921')
        log_access("Sent SMS from terminal")
    except Exception as e:
        print(f"Failed to send SMS from terminal: {e}")

def use_zoom_server():
    try:
        os.system('zoom --start')
        log_access("Started Zoom server")
    except Exception as e:
        print(f"Failed to start Zoom server: {e}")

def post_on_telegram():
    try:
        from telethon.sync import TelegramClient
        client = TelegramClient('session_name', 'api_id', 'api_hash')
        client.send_message('username', 'Hello from Linux Terminal!')
        log_access("Posted on Telegram")
    except Exception as e:
        print(f"Failed to post on Telegram: {e}")

def post_on_instagram():
    try:
        from instagram_private_api import Client
        api = Client('its_your_arjun007', 'K@m@ksh@007')
        api.post_photo('path_to_photo.jpg', 'Caption here')
        log_access("Posted on Instagram")
    except Exception as e:
        print(f"Failed to post on Instagram: {e}")

def post_on_facebook():
    try:
        graph = facebook.GraphAPI(access_token="your_access_token")
        graph.put_object(parent_object='me', connection_name='feed', message='Hello from Linux Terminal!')
        log_access("Posted on Facebook")
    except Exception as e:
        print(f"Failed to post on Facebook: {e}")

def post_on_discord():
    try:
        intents = discord.Intents.default()
        client = commands.Bot(command_prefix='!', intents=intents)
        @client.event
        async def on_ready():
            channel = client.get_channel(channel_id)
            await channel.send('Hello from Linux Terminal!')
            log_access("Posted on Discord")
        client.run('your_discord_bot_token')
    except Exception as e:
        print(f"Failed to post on Discord: {e}")

def change_file_colors():
    try:
        os.system('LS_COLORS="di=1;32:fi=0;34" ls --color=auto')
        log_access("Changed file and folder colors")
    except Exception as e:
        print(f"Failed to change file colors: {e}")

def read_ram():
    try:
        os.system('free -h')
        log_access("Read RAM usage")
    except Exception as e:
        print(f"Failed to read RAM usage: {e}")

def change_gnome_terminal():
    try:
        os.system('gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/ list "[\'<profile_id>\']"')
        log_access("Changed GNOME terminal appearance")
    except Exception as e:
        print(f"Failed to change GNOME terminal appearance: {e}")

def create_user():
    try:
        username = input("Enter username: ")
        password = input("Enter password: ")
        os.system(f'sudo useradd {username}')
        os.system(f'echo "{username}:{password}" | sudo chpasswd')
        log_access(f"Created user {username}")
    except Exception as e:
        print(f"Failed to create user: {e}")

def run_linux_in_browser():
    try:
        os.system('xdg-open https://www.webminal.org/')
        log_access("Opened Linux in browser")
    except Exception as e:
        print(f"Failed to open Linux in browser: {e}")

def google_search_from_terminal():
    query = input("Enter search query: ")
    try:
        search_results = list(search(query, num_results=10))
        print(f"Top Google Searches for '{query}':")
        for index, result in enumerate(search_results, start=1):
            print(f"{index}. {result}")
        log_access(f"Performed Google search from terminal for {query}")
    except Exception as e:
        print("Error: ", str(e))
        log_access(f"Failed to perform Google search from terminal for {query}")

def run_windows_software_in_linux():
    software_name = input("Enter the Windows software name (e.g., notepad.exe): ")
    try:
        os.system(f'WINEPREFIX=~/.wine wine {software_name}')
        log_access(f"Attempted to run Windows software {software_name} in Linux")
    except Exception as e:
        print(f"Failed to run Windows software: {e}")

def sync_folders():
    folder1 = filedialog.askdirectory(title="Select the first folder")
    folder2 = filedialog.askdirectory(title="Select the second folder")
    if folder1 and folder2:
        try:
            os.system(f'rsync -av --delete {folder1}/ {folder2}/')
            log_access(f"Synced folders {folder1} and {folder2}")
            print(f"Synced folders {folder1} and {folder2}")
        except Exception as e:
            print(f"Failed to sync folders: {e}")
    else:
        print("Both folders must be selected.")

def print_ascii_art():
    text = input("Enter text to convert to ASCII art: ")
    try:
        from pyfiglet import figlet_format
        ascii_art = figlet_format(text)
        print(ascii_art)
        log_access(f"Converted text to ASCII art: {text}")
    except ImportError:
        print("pyfiglet module not found. Install it using 'pip install pyfiglet'.")

# New functionalities
def send_sms_terminal():
    try:
        os.system('echo "Hello from Terminal" | smscli send --to +919057031921')
        log_access("Sent SMS from terminal")
    except Exception as e:
        print(f"Failed to send SMS from terminal: {e}")

def use_zoom_server():
    try:
        os.system('zoom --start')
        log_access("Started Zoom server")
    except Exception as e:
        print(f"Failed to start Zoom server: {e}")

def post_on_telegram():
    try:
        from telethon.sync import TelegramClient
        client = TelegramClient('session_name', 'api_id', 'api_hash')
        client.send_message('username', 'Hello from Linux Terminal!')
        log_access("Posted on Telegram")
    except Exception as e:
        print(f"Failed to post on Telegram: {e}")

def post_on_instagram():
    try:
        from instagram_private_api import Client
        api = Client('its_your_arjun007', 'K@m@ksh@007')
        api.post_photo('path_to_photo.jpg', 'Caption here')
        log_access("Posted on Instagram")
    except Exception as e:
        print(f"Failed to post on Instagram: {e}")

def post_on_facebook():
    try:
        graph = facebook.GraphAPI(access_token="your_access_token")
        graph.put_object(parent_object='me', connection_name='feed', message='Hello from Linux Terminal!')
        log_access("Posted on Facebook")
    except Exception as e:
        print(f"Failed to post on Facebook: {e}")

def post_on_discord():
    try:
        intents = discord.Intents.default()
        client = commands.Bot(command_prefix='!', intents=intents)
        @client.event
        async def on_ready():
            channel = client.get_channel(channel_id)
            await channel.send('Hello from Linux Terminal!')
            log_access("Posted on Discord")
        client.run('your_discord_bot_token')
    except Exception as e:
        print(f"Failed to post on Discord: {e}")

def change_file_colors():
    try:
        os.system('LS_COLORS="di=1;32:fi=0;34" ls --color=auto')
        log_access("Changed file and folder colors")
    except Exception as e:
        print(f"Failed to change file colors: {e}")

def read_ram():
    try:
        os.system('free -h')
        log_access("Read RAM usage")
    except Exception as e:
        print(f"Failed to read RAM usage: {e}")

def change_gnome_terminal():
    try:
        os.system('gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/ list "[\'<profile_id>\']"')
        log_access("Changed GNOME terminal appearance")
    except Exception as e:
        print(f"Failed to change GNOME terminal appearance: {e}")

def create_user():
    try:
        username = input("Enter username: ")
        password = input("Enter password: ")
        os.system(f'sudo useradd {username}')
        os.system(f'echo "{username}:{password}" | sudo chpasswd')
        log_access(f"Created user {username}")
    except Exception as e:
        print(f"Failed to create user: {e}")

def run_linux_in_browser():
    try:
        os.system('xdg-open https://www.webminal.org/')
        log_access("Opened Linux in browser")
    except Exception as e:
        print(f"Failed to open Linux in browser: {e}")

def clear_status():
    status_label.config(text="")

def create_button(parent, label, command):
    button = tk.Button(parent, font=("Arial", 10, "bold"), text=label, width=20, height=2, bg="#333333", fg="#ffffff", command=command)
    return button

root = tk.Tk()
root.title("Main Window")
root.geometry("1200x1000")
root.configure(bg="#1e1e1e")

title_label = tk.Label(root, text="Welcome to Shreyansh's Menu-based project", width=40, height=2, font=("Helvetica", 16, "bold"), fg="#ffffff", bg="#1e1e1e")
title_label.pack(pady=15)

software_entry = tk.Entry(root, width=64, bg="#2e2e2e", fg="#ffffff", font=("Arial", 12))
software_entry.pack(pady=20)

# Create a Canvas and a Frame for scrolling
canvas = tk.Canvas(root, bg="#1e1e1e")
scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
scrollable_frame = tk.Frame(canvas, bg="#2d2d2d")

# Create a window in the canvas that will hold the frame
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
scrollbar.config(command=canvas.yview)

# Add buttons to the scrollable frame
buttons = [
    ("CONNECT TO MONGODB", connect_to_mongo),
    ("CALCULATOR", lambda: open_software("calculator")),
    ("PAINT", lambda: open_software("paint")),
    ("CHROME", lambda: open_software("chrome")),
    ("WHATSAPP", whatsapp),
    ("SEND MESSAGE", message),
    ("CAPTURE PHOTO", click_photo),
    ("CAPTURE VIDEO", capture_video),
    ("CAPTURE CROP VIDEO", capture_crop_video),
    ("CREATE IMAGE 100X100", image_100_100),
    ("GET COORDINATES", get_coordinates),
    ("TOP 5 GOOGLE SEARCHES", top_5_google_searches),
    ("LAUNCH INSTANCE", launch_instance),
    ("CREATE BUCKET", create_bucket),
    ("USE SNS SERVICE", use_sns_service),
    ("UPLOAD TO S3", upload_to_s3),
    ("LOG ACCESS", lambda: log_access("Manual log entry")),
    ("SEND EMAIL", send_email),
    ("SEND SMS TERMINAL", send_sms_terminal),
    ("USE ZOOM SERVER", use_zoom_server),
    ("POST ON TELEGRAM", post_on_telegram),
    ("POST ON INSTAGRAM", post_on_instagram),
    ("POST ON FACEBOOK", post_on_facebook),
    ("POST ON DISCORD", post_on_discord),
    ("CHANGE FILE COLORS", change_file_colors),
    ("READ RAM", read_ram),
    ("CHANGE GNOME TERMINAL", change_gnome_terminal),
    ("CREATE USER", create_user),
    ("RUN LINUX IN BROWSER", run_linux_in_browser),
    ("GOOGLE SEARCH FROM TERMINAL", google_search_from_terminal),
    ("RUN WINDOWS SOFTWARE IN LINUX", run_windows_software_in_linux),
    ("SYNC FOLDERS", sync_folders),
    ("PRINT ASCII ART", print_ascii_art)
]

for i, (label, command) in enumerate(buttons):
    button = create_button(scrollable_frame, label, command)
    button.grid(row=i // 2, column=i % 2, padx=10, pady=10)

# Update scrollregion after adding buttons
scrollable_frame.update_idletasks()
canvas.config(scrollregion=canvas.bbox("all"))

# Layout
canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

status_label = tk.Label(root, text="", font=("Arial", 12), fg="white", bg="#2d2d2d")
status_label.pack(pady=20)

clear_button = tk.Button(root, text="Clear Status", font=("Arial", 10, "bold"), fg="#ffffff", bg="#555555", command=clear_status)
clear_button.pack()

root.mainloop()
